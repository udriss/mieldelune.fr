// middleware.ts

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { jwtVerify } from 'jose';

const SECRET_KEY = new TextEncoder().encode(process.env.SECRET_KEY);

// Domaines autorisés pour CORS
const ALLOWED_ORIGINS = [
  'https://mieldelune.fr',
  'https://www.mieldelune.fr',
  'http://localhost:3000', // Pour le développement
];

export async function middleware(request: NextRequest) {
  const url = request.nextUrl.clone();
  const origin = request.headers.get('origin') || '';
  
  // 1. GÉRER LES REQUÊTES API ET CORS
  if (url.pathname.startsWith('/api')) {
    // Vérifier si l'origine est autorisée
    const isAllowedOrigin = ALLOWED_ORIGINS.includes(origin) || 
                           origin.includes('localhost') || 
                           origin.includes('127.0.0.1');
    
    // Gérer les requêtes OPTIONS (preflight)
    if (request.method === 'OPTIONS') {
      return new NextResponse(null, {
        status: 200,
        headers: {
          'Access-Control-Allow-Origin': isAllowedOrigin ? origin : '',
          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Authorization',
          'Access-Control-Allow-Credentials': 'true',
          'Access-Control-Max-Age': '86400',
        },
      });
    }

    // Pour les autres méthodes
    const response = NextResponse.next();
    if (isAllowedOrigin) {
      response.headers.set('Access-Control-Allow-Origin', origin);
      response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      response.headers.set('Access-Control-Allow-Credentials', 'true');
    }
    
    return response;
  }

  // 2. GÉRER L'AUTHENTIFICATION ADMIN (votre code existant)
  if (url.pathname.startsWith('/admin')) {
    const token = request.cookies.get('adminAuth')?.value;
    
    if (url.pathname === '/admin/login') {
      if (!token) {
        return NextResponse.next();
      }
      try {
        await jwtVerify(token, SECRET_KEY);
        return NextResponse.rewrite(new URL('/admin', request.url));
      } catch {
        return NextResponse.next();
      }
    }

    if (!token) {
      return NextResponse.rewrite(new URL('/admin/login', request.url));
    }

    try {
      await jwtVerify(token, SECRET_KEY);
      return NextResponse.next();
    } catch {
      return NextResponse.rewrite(new URL('/admin/login', request.url));
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ['/admin/:path*', '/api/:path*']
};